source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/pcascript.R")
pred.e.fd
varsim <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarSim.csv", sep=",")#
varobs <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarObs.csv", sep=",")#
pred = (varobs-varsim)/varobs#
#
days = 1:365#
#
#Divide data into 3 regions#
wce <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/WCE.csv", sep=",")#
w = wce[1,]#
c = wce[2,]#
e = wce[3,]#
#
wInd = which(w==1)#
cInd = which(c==1)#
eInd = which(e==1)#
#
#Harmonic accelerator for smoothing of fourier basis#
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,1), c(0, 365))#
#
###### Observed Variance ########
#
varobsw = varobs[, wInd]#
varobsc = varobs[, cInd]#
varobse = varobs[, eInd]#
#
###### Simulated Variance ########
#
varsimw = varsim[, wInd]#
varsimc = varsim[, cInd]#
varsime = varsim[, eInd]#
#
###### Predictability ########
#
predw = pred[, wInd]#
predc = pred[, cInd]#
prede = pred[, eInd]#
#
#For west, use 171 fourier basis functions, lambda = 0.1#
#
###### Observed Variance #######
fbasis.varobs.w = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varobs.w = fdPar(fbasis.varobs.w, Lfdobj=harmLfd, lambda=0.1)#
varobs.w.fd = smooth.basis(days, varobsw, D2fdPar.varobs.w)#
#
###### Simulated Variance #######
fbasis.varsim.w = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varsim.w = fdPar(fbasis.varsim.w, Lfdobj=harmLfd, lambda=0.1)#
varsim.w.fd = smooth.basis(days, varsimw, D2fdPar.varsim.w)#
#
###### Predictability #######
fbasis.pred.w = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.pred.w = fdPar(fbasis.pred.w, Lfdobj=harmLfd, lambda=0.1)#
pred.w.fd = smooth.basis(days, predw, D2fdPar.pred.w)#
#
#For central, use 191 fourier basis functions, lambda = 0.1#
#
###### Observed Variance #######
fbasis.varobs.c = create.fourier.basis(c(0, 365), nbasis=191)#
D2fdPar.varobs.c = fdPar(fbasis.varobs.c, Lfdobj=harmLfd, lambda=0.1)#
varobs.c.fd = smooth.basis(days, varobsc, D2fdPar.varobs.c)#
#
###### Simulated Variance #######
fbasis.varsim.c = create.fourier.basis(c(0, 365), nbasis=191)#
D2fdPar.varsim.c = fdPar(fbasis.varsim.c, Lfdobj=harmLfd, lambda=0.1)#
varsim.c.fd = smooth.basis(days, varsimc, D2fdPar.varsim.c)#
#
###### Predictability #######
fbasis.pred.c = create.fourier.basis(c(0, 365), nbasis=191)#
D2fdPar.pred.c = fdPar(fbasis.pred.c, Lfdobj=harmLfd, lambda=0.1)#
pred.c.fd = smooth.basis(days, pred, D2fdPar.pred.c)#
#
#For east, use 171 fourier basis functions, lambda = 0.1#
#
###### Observed Variance #######
fbasis.varobs.e = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varobs.e = fdPar(fbasis.varobs.e, Lfdobj=harmLfd, lambda=0.1)#
varobs.e.fd = smooth.basis(days, varobse, D2fdPar.varobs.e)#
#
###### Simulated Variance #######
fbasis.varsim.e = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varsim.e = fdPar(fbasis.varsim.e, Lfdobj=harmLfd, lambda=0.1)#
varsim.e.fd = smooth.basis(days, varsim, D2fdPar.varsim.e)#
#
###### Predictability #######
fbasis.pred.e = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.pred.e = fdPar(fbasis.pred.e, Lfdobj=harmLfd, lambda=0.1)#
pred.e.fd = smooth.basis(days, pred, D2fdPar.pred.e)
varsim <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarSim.csv", sep=",")#
varobs <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarObs.csv", sep=",")#
pred = (varobs-varsim)/varobs#
#
days = 1:365#
#
#Divide data into 3 regions#
wce <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/WCE.csv", sep=",")#
w = wce[1,]#
c = wce[2,]#
e = wce[3,]#
#
wInd = which(w==1)#
cInd = which(c==1)#
eInd = which(e==1)#
#
#Harmonic accelerator for smoothing of fourier basis#
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,1), c(0, 365))#
#
###### Observed Variance ########
#
varobsw = varobs[, wInd]#
varobsc = varobs[, cInd]#
varobse = varobs[, eInd]#
#
###### Simulated Variance ########
#
varsimw = varsim[, wInd]#
varsimc = varsim[, cInd]#
varsime = varsim[, eInd]#
#
###### Predictability ########
#
predw = pred[, wInd]#
predc = pred[, cInd]#
prede = pred[, eInd]
predw
fbasis.varobs.w = create.fourier.basis(c(0, 365), nbasis=171)
fbasis.varobs.w
D2fdPar.varobs.w = fdPar(fbasis.varobs.w, Lfdobj=harmLfd, lambda=0.1)
D2fdPar.varobs.w
varobs.w.fd = smooth.basis(days, varobsw, D2fdPar.varobs.w)
varobswfd = smooth.basis(days, varobsw, D2fdPar.varobs.w)
D2fdPar.varobs.w
fbasis.varsim.w = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varsim.w = fdPar(fbasis.varsim.w, Lfdobj=harmLfd, lambda=0.1)#
varsim.w.fd = smooth.basis(days, varsimw, D2fdPar.varsim.w)
fbasis.varobs.w = create.fourier.basis(c(0, 365), nbasis=171)
VarObsWestfd = smooth.basis(day, varobsw, fbasis.varobs.w)
VarObsWestfd = smooth.basis(days, varobsw, fbasis.varobs.w)
VarObsWestfd = smooth.basis(days, varobs, fbasis.varobs.w)
source("/Users/evanappleton/Dropbox/MA882_final_project/Lijun/882.R")
varobsw
varobs
predw = pred[wInd, ]#
predc = pred[cInd, ]#
prede = pred[eInd, ]
predw
wInd
w
varsim <- read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarSim.csv", sep=",")
varsim
varsim <- t(read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarSim.csv", sep=","))
varsim
varsim <- t(read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarSim.csv", sep=","))#
varobs <- t(read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/VarObs.csv", sep=","))#
pred = (varobs-varsim)/varobs#
#
days = 1:365#
#
#Divide data into 3 regions#
wce <- t(read.table("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/WCE.csv", sep=","))#
w = wce[1,]#
c = wce[2,]#
e = wce[3,]#
#
wInd = which(w==1)#
cInd = which(c==1)#
eInd = which(e==1)#
#
#Harmonic accelerator for smoothing of fourier basis#
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,1), c(0, 365))#
#
###### Observed Variance ########
#
varobsw = varobs[, wInd]#
varobsc = varobs[, cInd]#
varobse = varobs[, eInd]#
#
###### Simulated Variance ########
#
varsimw = varsim[, wInd]#
varsimc = varsim[, cInd]#
varsime = varsim[, eInd]#
#
###### Predictability ########
#
predw = pred[, wInd]#
predc = pred[, cInd]#
prede = pred[, eInd]#
#
#For west, use 171 fourier basis functions, lambda = 0.1#
#
###### Observed Variance #######
fbasis.varobs.w = create.fourier.basis(c(0, 365), nbasis=171)#
D2fdPar.varobs.w = fdPar(fbasis.varobs.w, Lfdobj=harmLfd, lambda=0.1)#
varobs.w.fd = smooth.basis(days, varobsw, D2fdPar.varobs.w)
varobs.w.fd
plot(varobs.w.fd)
source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/pcascript.R")
?smooth.basis
source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/pcascript.R")
source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/fPCA_project.R")
#fPCA for West with 50 components, no smoothing#
#
fpca.varobsw.fd = pca.fd(varobs.w.fd$fd, nharm = 50)#
fpca.varsimw.fd = pca.fd(varsim.w.fd$fd, nharm = 50)#
fpca.predw.fd = pca.fd(pred.w.fd$fd, nharm = 50)#
#
#fPCA for Central with 50 components, no smoothing#
#
fpca.varobsc.fd = pca.fd(varobs.c.fd$fd, nharm = 50)#
fpca.varsimc.fd = pca.fd(varsim.c.fd$fd, nharm = 50)#
fpca.predc.fd = pca.fd(pred.c.fd$fd, nharm = 50)#
#
#fPCA for East with 50 components, no smoothing#
#
fpca.varobse.fd = pca.fd(varobs.e.fd$fd, nharm = 50)#
fpca.varsime.fd = pca.fd(varsim.e.fd$fd, nharm = 50)#
fpca.prede.fd = pca.fd(pred.e.fd$fd, nharm = 50)
fpca.prede.fd
plot(fpca.prede.fd$varprop)
plot.pca.fd(fpca.prede.fd)
?plot.pca.fd
plot.pca.fd(fpca.prede.fd, nx=50)
plot.pca.fd(fpca.prede.fd, pointplot=FALSE)
plot.pca.fd(fpca.prede.fd, pointplot=FALSE, harm = 1:8)
plot(fpca.prede.fd)
#fPCA for West with 50 components, no smoothing#
#
fpca.varobsw.fd = pca.fd(varobs.w.fd$fd, nharm = 40)#
fpca.varsimw.fd = pca.fd(varsim.w.fd$fd, nharm = 40)#
fpca.predw.fd = pca.fd(pred.w.fd$fd, nharm = 40)#
#
#fPCA for Central with 50 components, no smoothing#
#
fpca.varobsc.fd = pca.fd(varobs.c.fd$fd, nharm = 40)#
fpca.varsimc.fd = pca.fd(varsim.c.fd$fd, nharm = 40)#
fpca.predc.fd = pca.fd(pred.c.fd$fd, nharm = 40)#
#
#fPCA for East with 50 components, no smoothing#
#
fpca.varobse.fd = pca.fd(varobs.e.fd$fd, nharm = 40)#
fpca.varsime.fd = pca.fd(varsim.e.fd$fd, nharm = 40)#
fpca.prede.fd = pca.fd(pred.e.fd$fd, nharm = 40)
plot(fpca.prede.fd)
f
c
#fPCA for West with 50 components, no smoothing#
#
fpca.varobsw.fd = pca.fd(varobs.w.fd$fd, nharm = 40)#
fpca.varsimw.fd = pca.fd(varsim.w.fd$fd, nharm = 40)#
fpca.predw.fd = pca.fd(pred.w.fd$fd, nharm = 40)#
#
#fPCA for Central with 50 components, no smoothing#
#
fpca.varobsc.fd = pca.fd(varobs.c.fd$fd, nharm = 40)#
fpca.varsimc.fd = pca.fd(varsim.c.fd$fd, nharm = 40)#
fpca.predc.fd = pca.fd(pred.c.fd$fd, nharm = 40)#
#
#fPCA for East with 50 components, no smoothing#
#
fpca.varobse.fd = pca.fd(varobs.e.fd$fd, nharm = 40)#
fpca.varsime.fd = pca.fd(varsim.e.fd$fd, nharm = 40)#
fpca.prede.fd = pca.fd(pred.e.fd$fd, nharm = 40)
#fPCA for West with 50 components, no smoothing#
#
fpca.varobsw.fd = pca.fd(varobs.w.fd$fd, nharm = 5)#
fpca.varsimw.fd = pca.fd(varsim.w.fd$fd, nharm = 5)#
fpca.predw.fd = pca.fd(pred.w.fd$fd, nharm = 5)#
#
#fPCA for Central with 50 components, no smoothing#
#
fpca.varobsc.fd = pca.fd(varobs.c.fd$fd, nharm = 5)#
fpca.varsimc.fd = pca.fd(varsim.c.fd$fd, nharm = 5)#
fpca.predc.fd = pca.fd(pred.c.fd$fd, nharm = 5)#
#
#fPCA for East with 50 components, no smoothing#
#
fpca.varobse.fd = pca.fd(varobs.e.fd$fd, nharm = 5)#
fpca.varsime.fd = pca.fd(varsim.e.fd$fd, nharm = 5)#
fpca.prede.fd = pca.fd(pred.e.fd$fd, nharm = 5)
plot(fpca.prede.fd)
#fPCA for West with 15 components, no smoothing#
#
fpca.varobsw.fd = pca.fd(varobs.w.fd$fd, nharm = 15)#
fpca.varsimw.fd = pca.fd(varsim.w.fd$fd, nharm = 15)#
fpca.predw.fd = pca.fd(pred.w.fd$fd, nharm = 15)#
#
#fPCA for Central with 50 components, no smoothing#
#
fpca.varobsc.fd = pca.fd(varobs.c.fd$fd, nharm = 15)#
fpca.varsimc.fd = pca.fd(varsim.c.fd$fd, nharm = 15)#
fpca.predc.fd = pca.fd(pred.c.fd$fd, nharm = 15)#
#
#fPCA for East with 50 components, no smoothing#
#
fpca.varobse.fd = pca.fd(varobs.e.fd$fd, nharm = 15)#
fpca.varsime.fd = pca.fd(varsim.e.fd$fd, nharm = 15)#
fpca.prede.fd = pca.fd(pred.e.fd$fd, nharm = 15)
plot(fpca.prede.fd$meanfd)
plot(fpca.prede.fd$harmonics)
?dev.off
plot(fpca.prede.fd$harmonics(1:8))
plot(fpca.prede.fd$harmonics(1))
plot(fpca.prede.fd$harmonics)
fpca.prede.fd$harmonics
plot(fpca.prede.fd$harmonics)
?plot
source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/fPCA_project.R")
plot(fpca.prede.fd$values)
plot(fpca.prede.fd$varprop)
source("/Users/evanappleton/Documents/Documents/Spring2012/MA882/Project/fPCA_project.R")
source("http://bioconductor.org/biocLite.R")#
biocLite("flowCore")
biocLite("flowBeads")
browseVignettes("flowBeads")
biocLite("flowBeads")
citation("flowCore")
citation("flowBeads")
source("analze_5615.R")
source("analyze_5615.R")
ls()
uniqueMediaTypeThisPart
unique
replicates
replicateFiles
files
keys
nrow(uniqueMediaTypeThisPart)
k
file
media
for (k in 1:nrow(uniqueMediaTypeThisPart)) {#
				file <- as.character(uniqueMediaTypeThisPart[k,]$FILENAME)#
				media <- c(media, as.character(uniqueMediaTypeThisPart[k,]$MEDIA)) }
k
media
file
xaxis
means
standardDevs
source("analyze_5615.R")
media
uniqueMediaTypeThisPart
uniqueMediaTypes
ls()
blankMediaTypeThisPart
blankMediaTypeThisPart <- uniqueMediaThisPart[which(mediaNonDuplicatesKey$MEDIA == ""),]#
			uniqueMediaTypeThisPart <- uniqueMediaThisPart[which(TRUE == grepl(mediaType, mediaNonDuplicatesKey$MEDIA)),]#
			uniqueMediaTypeThisPart <- rbind(blankMediaTypeThisPart,uniqueMediaTypeThisPart)
uniqueMediaTypeThisPart
uniqueMediaTypeThisPart <- uniqueMediaThisPart[which(TRUE == grepl(mediaType, uniqueMediaThisPart$MEDIA)),]
uniqueMediaTypeThisPart
unique
mediaType
blankMediaTypeThisPart
uniqueMediaThisPart
mediaNonDuplicatesKey
uniqueMediaTypeThisPart <- uniqueMediaThisPart[which(TRUE == grepl(mediaType, mediaTimeNonDuplicatesKey$MEDIA)),]#
			uniqueMediaTypeThisPart <- rbind(blankMediaTypeThisPart,uniqueMediaTypeThisPart)
source("analyze_5615.R")
uniqueMediaTypeThisPart
uniqueMediaTypeThisPart[!duplicated(uniqueMediaTypeThisPart)]
uniqueMediaTypeThisPart[!duplicated(uniqueMediaTypeThisPart$MEDIA)]
!duplicated(uniqueMediaTypeThisPart$MEDIA)
uniqueMediaTypeThisPart$MEDIA[!duplicated(uniqueMediaTypeThisPart$MEDIA)]
b <- uniqueMediaTypeThisPart$MEDIA[!duplicated(uniqueMediaTypeThisPart$MEDIA)]
b
b <- as.character(uniqueMediaTypeThisPart$MEDIA[!duplicated(uniqueMediaTypeThisPart$MEDIA)])
b
uniqueMediaTypes
timesThisMedia <- uniqueMediaTimeThisPart[which(TRUE == grepl(uniqueMediaTypes[1], uniqueMediaTimeThisPart$MEDIA)),]
timesThisMedia <- uniqueMediaTypeThisPart[which(TRUE == grepl(uniqueMediaTypes[1], uniqueMediaTypeThisPart$MEDIA)),]
timesThisMedia
timesThisMedia <- uniqueMediaTypeThisPart[which(TRUE == grepl("ara", uniqueMediaTypeThisPart$MEDIA)),]
timesThisMedia
unique(uniqueMediaTypeThisPart$TIME)
as.character(unique(uniqueMediaTypeThisPart$TIME))
source("analyze_5615.R")
uniqueMediaTimeThisPart
uniqueMediaTypes
source("analyze_5615.R")
uniqueMediaTypes
uniqueMediaTimeThisPart
timesThisMedia <- as.character(unique(uniqueMediaTimeThisPart$TIME))
timesThisMedia
time <- timesThisMedia[5]
time
uniquePartMediaTime <- uniqueMediaTimeThisPart[which(TRUE == grepl(time, uniqueMediaTimeThisPart$TIME)),]
uniquePartMediaTime
uniqueMediaThisPart
uniqueMediaTypes
mediaType
uniqueMediaTimeThisPart
uniqueMediaTimeThisPart <- uniqueConditionsThisPart[which(TRUE == grepl(mediaType, mediaTimeNonDuplicatesKey$MEDIA)),]
source("analyze_5615.R")
uniqueMediaTimeThisPart <- uniqueConditionsThisPart[which(TRUE == grepl(mediaType, mediaTimeNonDuplicatesKey$MEDIA)),]
uniqueMediaTimeThisPart
uniqueConditionsThisPart
mediaType
uniqueMediaTimeThisPart <- uniqueConditionsThisPart[which(TRUE == grepl(mediaType, uniqueConditionsThisPart$MEDIA)),]
uniqueMediaTimeThisPart
source("analyze_5615.R")
uniqueConditionsThisPart
mediaTimeNonDuplicatesKey
part
mediaTimeNonDuplicatesKey[which(TRUE == grepl(part, mediaTimeNonDuplicatesKey$PART)),]
mediaTimeNonDuplicatesKey[which(TRUE == grepl(J23104_BCD2_rfp_LAA_B0015, mediaTimeNonDuplicatesKey$PART)),]
mediaTimeNonDuplicatesKey[which(TRUE == grepl("J23104_BCD2_rfp_LAA_B0015", mediaTimeNonDuplicatesKey$PART)),]
uniqueConditionsThisPart <- mediaTimeNonDuplicatesKey[which(TRUE == grepl("J23104_BCD2_rfp_LAA_B0015", mediaTimeNonDuplicatesKey$PART)),]
uniqueConditionsThisPart
mediaTypes <- sub("\\(?[0-9,.]+\\)?","", mediaTimeNonDuplicatesKey$MEDIA)
mediaTypes
uniqueMediaTypes <- unique(sub("^\\s+|\\s+$","",mediaTypes))
uniqueMediaTypes
mediaType
blankMediaTypeThisPart <- uniqueConditionsThisPart[which(mediaTimeNonDuplicatesKey$MEDIA == ""),]#
			uniqueMediaTimeThisPart <- uniqueConditionsThisPart[which(TRUE == grepl(mediaType, uniqueConditionsThisPart$MEDIA)),]#
			uniqueMediaTimeThisPart <- rbind(blankMediaTypeThisPart,uniqueMediaTimeThisPart)
uniqueMediaTimeThisPart
source("analyze_5615.R")
uniqueMediaTypes
mediaTypes
part
uniqueMediaTimeThisPart
meansa
means
uniqueMediaTimeThisPart
k
source("analyze_5615.R")
uniqueMediaTypes
uniqueMediaRows
unique(uniqueMediaRows$Media)
unique(uniqueMediaRows$MEDIA)
as.character(unique(uniqueMediaRows$MEDIA))
length(as.character(unique(uniqueMediaRows$MEDIA)))
blankMediaTimeRow
source("analyze_5615.R")
mediaType
uniqueMediaTypes
uniqueMediaTypeConcentration <- uniqueMediaTypeConcentrations[k]#
			uniqueMediaTypeConcentration <- gsub("\\(","\\\\(",uniqueMediaTypeConcentration)#
			uniqueMediaTypeConcentration <- gsub("\\)","\\\\)",uniqueMediaTypeConcentration)
uniqueMediaTypeConcentrations <- as.character(unique(uniqueMediaRows$MEDIA))
uniqueMediaTypeConcentration <- uniqueMediaTypeConcentrations[k]#
			uniqueMediaTypeConcentration <- gsub("\\(","\\\\(",uniqueMediaTypeConcentration)#
			uniqueMediaTypeConcentration <- gsub("\\)","\\\\)",uniqueMediaTypeConcentration)
uniqueMediaTypeConcentration
uniqueMediaRowsAllTimes <- uniqueTimeMediaRows[which(TRUE == grepl(uniqueMediaTypeConcentration, uniqueMediaRows$MEDIA)),]
uniqueMediaRowsAllTimes
t <- as.character(unique(uniqueMediaRowsAllTimes$TIME))
t
uniqueMediaTimes <- as.character(unique(uniqueMediaRowsAllTimes$TIME))
uniqueMediaTimes
uniqueMediaTimeRow <- uniqueMediaRowsAllTimes[which(TRUE == grepl(uniqueMediaTimes, uniqueMediaRowsAllTimes$TIME)),]
uniqueMediaTimeRow
file <- as.character(uniqueMediaTimeRow$FILENAME)
file
partMediaKey <- c("MEDIA", "PART", "TIME")
duplicateRowsThisExactMedia <- data.table(allPartTimeMediaDuplicateRows, key=partMediaKey)
duplicateRowsThisExactMedia
# uniqueRowsThisExactMedia <- data.table(uniqueMediaRows[k,], key=partMediaKey)
uniqueRowsThisExactMedia <- data.table(uniqueMediaTimeRow, key=partMediaKey)
uniqueRowsThisExactMedia
replicateFiles <- as.character(merge(uniqueRowsThisExactMedia, duplicateRowsThisExactMedia)$FILENAME.y)
replicateFiles
source("analyze_5615.R")
uniqueMediaTypeConcentrations
filesMediaConcentration
files
uniqueMediaTimes
media
xaxis
files
filesMediaConcentration
uniqueMediaTypeConcentrations
uniqueMediaRowsAllTimes
uniqueMediaTypeConcentration
uniqueTimeMediaRows[which(TRUE == grepl(uniqueMediaTypeConcentration, uniqueMediaRows$MEDIA)),]
uniqueMediaRows
uniqueMediaTypeConcentration
which(TRUE == grepl(uniqueMediaTypeConcentration, uniqueMediaRows$MEDIA))
uniqueTimeMediaRows
mediaType
which(TRUE == grepl(mediaType, allPartTimeMediaUniqueRows$MEDIA))
uniqueTimeMediaRows
uniqueMediaRows
uniqueMediaRows[which(TRUE == grepl(uniqueMediaTypeConcentration, uniqueMediaRows$MEDIA)),]
source("analyze_5615.R")
files
filesMediaConcentration
meansMediaTime
source("analyze_5615.R")
nrows(meanMediaTime)
nrow(meansMediaTime)
source("analyze_5615.R")
meansMediaTime
if (nrow(meansMediaTime) > 1)
nrow(meansMediaTime) > 1
source("analyze_5615.R")
u
length(colnames(meansMediaTime))
u
source("analyze_5615.R")
uniqueMediaTimes
ls
ls()
source("analyze_5615.R")
key
